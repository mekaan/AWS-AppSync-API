service: AppSyncAPI
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
org: mekan
app: appsync

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2.46.0'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  profile: staAccount
  environment:
    stage: ${self:custom.stage}
    tableName: ${self:custom.tableName}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"

plugins:
  - serverless-bundle
  - serverless-appsync-plugin

custom:
  tableName: students-${self:custom.stage}
  cognitoPoolName: ${self:custom.stage}-appsync-api-cognito
  stage: ${opt:stage, self:provider.stage}
  bundle:
    linting: false
    sourcemaps: false
    caching: false
    stats: false
    ignorePlugins:
        - 'pg-hstore'

  appSync:
    name:  student-appsync-api-${self:custom.stage}
    serviceRole: "AppSyncAPIServiceRole"
    # apiKey # only required for update-appsync/delete-appsync
    # apiId # if provided, will update the specified API.
    authenticationType: AMAZON_COGNITO_USER_POOLS
    # AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: eu-west-2
      defaultAction: ALLOW
      userPoolId: {Ref: CognitoUserPool}
    mappingTemplates:
      - type: Query
        request: "request/getById-request-mapping-template.txt"
        response: "response/response-mapping-template.txt"
        dataSource: getStudentLambdaDataSource
        field: getById
      - type: Mutation
        request: "request/create-request-mapping-template.txt"
        response: "response/response-mapping-template.txt"
        dataSource: createStudentLambdaDataSource
        field: create
      - type: Mutation
        request: "request/update-request-mapping-template.txt"
        response: "response/response-mapping-template.txt"
        dataSource: updateStudentLambdaDataSource
        field: update
      - type: Mutation
        request: "request/delete-request-mapping-template.txt"
        response: "response/response-mapping-template.txt"
        dataSource: deleteStudentStudentLambdaDataSource
        field: deleteStudent
    dataSources:
      - type: AWS_LAMBDA
        name: getStudentLambdaDataSource
        description: "get's student by id"
        config:
          functionName: getById
      - type: AWS_LAMBDA
        name: createStudentLambdaDataSource
        description: "creates studentd"
        config:
          functionName: create
      - type: AWS_LAMBDA
        name: updateStudentLambdaDataSource
        description: "updates student"
        config:
          functionName: update
      - type: AWS_LAMBDA
        name: deleteStudentStudentLambdaDataSource
        description: "delete student"
        config:
          functionName: deleteStudent

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: create
          method: put
          integration: lambda
  getById:
    handler: handler.getById
    events:
      - http:
          path: getById
          method: get
          integration: lambda
          request:
            template:
              application/json: '{ "id" : "$input.params(''id'')"}'
  update:
    handler: handler.update
    events:
      - http:
          path: update
          method: post
          integration: lambda
  deleteStudent:
    handler: handler.deleteStudent
    events:
      - http:
          path: deleteStudent
          method: delete
          integration: lambda

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources:
  Resources:
    #DynamoDB table
    StudentDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        BillingMode: PAY_PER_REQUEST
    #Cognito - User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.cognitoPoolName}-user-pool
        UsernameAttributes:
          - email
    #Cognito - Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.cognitoPoolName}-client
        UserPoolId:
          Ref: CognitoUserPool
    #Cognito - Identity
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.cognitoPoolName}-identity-pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [CognitoUserPool, ProviderName]
    #Cognito roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnauthRole, Arn]
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.cognitoPoolName}-appAuthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: "*"
    CognitoUnauthRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.cognitoPoolName}-appUnauthRole
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: "CognitoUnauthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
    # AppSync lambda role
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "Lambda-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource: "*"